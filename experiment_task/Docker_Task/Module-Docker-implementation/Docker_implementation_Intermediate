=> Describe how image deletion works

-> Process to deletion an image:
1. First you need to list all image and get the image IDs, Image name and other details.
$ docker images -a
$docker image ls

After that you need to select those image you want to delete. That image IDs
$ docker rmi -f <your-image-id>
or, 
$ docker image rm -f <your-image-id>

=> Utilize a registry to store an image

-> I have created a docker hub registry and stored my test image there.


=> Display layers of a Docker image

$ docker history image_id/image_name
$ docker image history image_id/image_name
$ docker history --no-trunc image_id/image_name

=> Modify an image to a single layer

->
$ docker run -itd -p 8080:80 --name test-container test-1
$ docker container export <container-id created from previous command> -o myimage.tar.gz
$ cat myimage.tar.gz | docker import - test-1:latest
$ docker history itest-1:latest
$ docker image history test-1:latest
$ docker history --no-trunc test-1:latest

=> Describe how image layers work

-> Each layer is an image itself, just one without a human-assigned tag. They have auto-generated IDs though.
-> Each layer stores the changes compared to the image it’s based on.
-> An image can consist of a single layer (that’s often the case when the squash command was used).
-> Each instruction in a Dockerfile results in a layer. (Except for multi-stage builds, where usually only the layers in the final image are pushed, or when an image is squashed to a single layer).
-> Layers are used to avoid transferring redundant information and skip build steps which have not changed (according to the Docker cache).


=> Describe how volumes are used with Docker for persistent storage

-> Docker volumes are file systems mounted on Docker containers to preserve data generated by the running container. The volumes are stored on the host, independent of the container life cycle. This allows users to back up data and share file systems between containers easily.